{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { ClientHeaderBuilder, pascal } from '@orval/core';\nimport {\n  camel,\n  ClientBuilder,\n  ClientGeneratorsBuilder,\n  generateFormDataAndUrlEncodedFunction,\n  generateVerbImports,\n  GeneratorOptions,\n  GeneratorVerbOptions,\n  GetterPropType,\n  stringify,\n  toObjectString,\n  generateBodyOptions,\n  isObject,\n  resolveRef,\n} from '@orval/core';\nimport {\n  PathItemObject,\n  ParameterObject,\n  ReferenceObject,\n} from 'openapi3-ts/oas30';\nimport { SchemaObject } from 'openapi3-ts/oas31';\n\nexport const generateRequestFunction = (\n  {\n    queryParams,\n    headers,\n    operationName,\n    response,\n    mutator,\n    body,\n    props,\n    verb,\n    fetchReviver,\n    formData,\n    formUrlEncoded,\n    override,\n  }: GeneratorVerbOptions,\n  { route, context, pathRoute }: GeneratorOptions,\n) => {\n  const isRequestOptions = override?.requestOptions !== false;\n  const isFormData = override?.formData.disabled === false;\n  const isFormUrlEncoded = override?.formUrlEncoded !== false;\n\n  const getUrlFnName = camel(`get-${operationName}-url`);\n  const getUrlFnProps = toObjectString(\n    props.filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS ||\n        prop.type === GetterPropType.QUERY_PARAM,\n    ),\n    'implementation',\n  );\n\n  const spec = context.specs[context.specKey].paths[pathRoute] as\n    | PathItemObject\n    | undefined;\n  const parameters =\n    spec?.[verb]?.parameters || ([] as (ParameterObject | ReferenceObject)[]);\n\n  const explodeParameters = parameters.filter((parameter) => {\n    const { schema } = resolveRef<ParameterObject>(parameter, context);\n    const schemaObject = schema.schema as SchemaObject;\n\n    return (\n      schema.in === 'query' &&\n      schemaObject.type === 'array' &&\n      (schema.explode || override.fetch.explode)\n    );\n  });\n\n  const explodeParametersNames = explodeParameters.map((parameter) => {\n    const { schema } = resolveRef<ParameterObject>(parameter, context);\n\n    return schema.name;\n  });\n  const hasDateParams =\n    context.output.override.useDates &&\n    parameters.some(\n      (p) =>\n        'schema' in p &&\n        p.schema &&\n        'format' in p.schema &&\n        p.schema.format === 'date-time',\n    );\n\n  const explodeArrayImplementation =\n    explodeParameters.length > 0\n      ? `const explodeParameters = ${JSON.stringify(explodeParametersNames)};\n\n    if (Array.isArray(value) && explodeParameters.includes(key)) {\n      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : ${hasDateParams ? 'v instanceof Date ? v.toISOString() : ' : ''}v.toString()));\n      return;\n    }\n      `\n      : '';\n\n  const isExplodeParametersOnly =\n    explodeParameters.length === parameters.length;\n\n  const nomalParamsImplementation = `if (value !== undefined) {\n      normalizedParams.append(key, value === null ? 'null' : ${hasDateParams ? 'value instanceof Date ? value.toISOString() : ' : ''}value.toString())\n    }`;\n\n  const getUrlFnImplementation = `export const ${getUrlFnName} = (${getUrlFnProps}) => {\n${\n  queryParams\n    ? `  const normalizedParams = new URLSearchParams();\n\n  Object.entries(params || {}).forEach(([key, value]) => {\n    ${explodeArrayImplementation}\n    ${!isExplodeParametersOnly ? nomalParamsImplementation : ''}\n  });`\n    : ''\n}\n\n  ${queryParams ? `const stringifiedParams = normalizedParams.toString();` : ``}\n\n  ${\n    queryParams\n      ? `return stringifiedParams.length > 0 ? \\`${route}${'?${stringifiedParams}'}\\` : \\`${route}\\``\n      : `return \\`${route}\\``\n  }\n}\\n`;\n\n  const isContentTypeNdJson = (contentType: string) =>\n    contentType === 'application/nd-json' ||\n    contentType === 'application/x-ndjson';\n\n  const isNdJson = response.contentTypes.some(isContentTypeNdJson);\n  const responseTypeName = fetchResponseTypeName(\n    override.fetch?.includeHttpResponseReturnType,\n    isNdJson ? 'Response' : response.definition.success,\n    operationName,\n  );\n\n  const allResponses = [...response.types.success, ...response.types.errors];\n  if (allResponses.length === 0) {\n    allResponses.push({\n      contentType: '',\n      hasReadonlyProps: false,\n      imports: [],\n      isEnum: false,\n      isRef: false,\n      key: 'default',\n      schemas: [],\n      type: 'unknown',\n      value: 'unknown',\n    });\n  }\n  const nonDefaultStatuses = allResponses\n    .filter((r) => r.key !== 'default')\n    .map((r) => r.key);\n  const responseDataTypes = allResponses\n    .map((r) =>\n      allResponses.filter((r2) => r2.key === r.key).length > 1\n        ? { ...r, suffix: pascal(r.contentType) }\n        : r,\n    )\n    .map((r) => {\n      const name = `${responseTypeName}${pascal(r.key)}${'suffix' in r ? r.suffix : ''}`;\n      return {\n        name,\n        value: `export type ${name} = {\n  ${isContentTypeNdJson(r.contentType) ? `stream: TypedResponse<${r.value}>` : `data: ${r.value || 'unknown'}`}\n  status: ${\n    r.key === 'default'\n      ? nonDefaultStatuses.length\n        ? `Exclude<HTTPStatusCodes, ${nonDefaultStatuses.join(' | ')}>`\n        : 'number'\n      : r.key\n  }\n}`,\n      };\n    });\n\n  const compositeName = `${responseTypeName}Composite`;\n  const compositeResponse = `${compositeName} = ${responseDataTypes.map((r) => r.name).join(' | ')}`;\n\n  const responseTypeImplementation = override.fetch\n    .includeHttpResponseReturnType\n    ? `${responseDataTypes.map((r) => r.value).join('\\n\\n')}\n    \nexport type ${compositeResponse};\n    \nexport type ${responseTypeName} = ${compositeName} & {\n  headers: Headers;\n}\\n\\n`\n    : '';\n\n  const getUrlFnProperties = props\n    .filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.QUERY_PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS,\n    )\n    .map((param) => {\n      if (param.type === GetterPropType.NAMED_PATH_PARAMS) {\n        return param.destructured;\n      } else {\n        return param.name;\n      }\n    })\n    .join(',');\n\n  const args = `${toObjectString(props, 'implementation')} ${isRequestOptions ? `options?: RequestInit` : ''}`;\n  const returnType = `Promise<${responseTypeName}>`;\n\n  const globalFetchOptions = isObject(override?.requestOptions)\n    ? `${stringify(override?.requestOptions)?.slice(1, -1)?.trim()}`\n    : '';\n  const fetchMethodOption = `method: '${verb.toUpperCase()}'`;\n  const ignoreContentTypes = ['multipart/form-data'];\n  const headersToAdd: string[] = [\n    ...(body.contentType && !ignoreContentTypes.includes(body.contentType)\n      ? [`'Content-Type': '${body.contentType}'`]\n      : []),\n    ...(isNdJson && response.contentTypes.length === 1\n      ? [\n          `Accept: ${\n            response.contentTypes[0] === 'application/x-ndjson'\n              ? \"'application/x-ndjson'\"\n              : \"'application/nd-json'\"\n          }`,\n        ]\n      : []),\n    ...(headers ? ['...headers'] : []),\n  ];\n  const fetchHeadersOption = headersToAdd.length\n    ? `headers: { ${headersToAdd.join(',')}, ...options?.headers }`\n    : '';\n  const requestBodyParams = generateBodyOptions(\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  );\n  const fetchBodyOption = requestBodyParams\n    ? (isFormData && body.formData) ||\n      (isFormUrlEncoded && body.formUrlEncoded) ||\n      body.contentType === 'text/plain'\n      ? `body: ${requestBodyParams}`\n      : `body: JSON.stringify(${requestBodyParams})`\n    : '';\n\n  const fetchFnOptions = `${getUrlFnName}(${getUrlFnProperties}),\n  {${globalFetchOptions ? '\\n' : ''}      ${globalFetchOptions}\n    ${isRequestOptions ? '...options,' : ''}\n    ${fetchMethodOption}${fetchHeadersOption ? ',' : ''}\n    ${fetchHeadersOption}${fetchBodyOption ? ',' : ''}\n    ${fetchBodyOption}\n  }\n`;\n  const reviver = fetchReviver ? `, ${fetchReviver.name}` : '';\n  const fetchResponseImplementation = isNdJson\n    ? `const stream = await fetch(${fetchFnOptions})\n\n  ${override.fetch.includeHttpResponseReturnType ? `return { status: stream.status, stream, headers: stream.headers } as ${responseTypeName}` : `return stream`}\n  `\n    : `const res = await fetch(${fetchFnOptions})\n\n  const body = [204, 205, 304].includes(res.status) ? null : await res.text()\n  const data: ${responseTypeName}${override.fetch.includeHttpResponseReturnType ? `['data']` : ''} = body ? JSON.parse(body${reviver}) : {}\n\n  ${override.fetch.includeHttpResponseReturnType ? `return { data, status: res.status, headers: res.headers } as ${responseTypeName}` : 'return data'}\n`;\n  const customFetchResponseImplementation = `return ${mutator?.name}<${responseTypeName}>(${fetchFnOptions});`;\n\n  const bodyForm = generateFormDataAndUrlEncodedFunction({\n    formData,\n    formUrlEncoded,\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  });\n\n  const fetchImplementationBody = mutator\n    ? customFetchResponseImplementation\n    : fetchResponseImplementation;\n\n  const fetchImplementation = `export const ${operationName} = async (${args}): ${returnType} => {\n  ${bodyForm ? `  ${bodyForm}` : ''}\n  ${fetchImplementationBody}}\n`;\n\n  const implementation =\n    `${responseTypeImplementation}` +\n    `${getUrlFnImplementation}\\n` +\n    `${fetchImplementation}\\n`;\n\n  return implementation;\n};\n\nexport const fetchResponseTypeName = (\n  includeHttpResponseReturnType: boolean | undefined,\n  definitionSuccessResponse: string,\n  operationName: string,\n) => {\n  return includeHttpResponseReturnType\n    ? `${operationName}Response`\n    : definitionSuccessResponse;\n};\n\nexport const generateClient: ClientBuilder = (verbOptions, options) => {\n  const imports = generateVerbImports(verbOptions);\n  const functionImplementation = generateRequestFunction(verbOptions, options);\n\n  return {\n    implementation: `${functionImplementation}\\n`,\n    imports,\n  };\n};\n\nconst getHTTPStatusCodes = () => `\nexport type HTTPStatusCode1xx = 100 | 101 | 102 | 103;\nexport type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;\nexport type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;\nexport type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;\nexport type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;\nexport type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;\n\n`;\n\nexport const generateFetchHeader: ClientHeaderBuilder = ({\n  clientImplementation,\n}) => {\n  return clientImplementation.includes('<HTTPStatusCodes,')\n    ? getHTTPStatusCodes()\n    : '';\n};\n\nconst fetchClientBuilder: ClientGeneratorsBuilder = {\n  client: generateClient,\n  header: generateFetchHeader,\n  dependencies: () => [],\n};\n\nexport const builder = () => () => fetchClientBuilder;\n\nexport default builder;\n"],"mappings":"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","names":["import_core"]}
{"version":3,"sources":["../src/index.ts","../src/client.ts"],"sourcesContent":["import {\n  camel,\n  ClientBuilder,\n  ClientDependenciesBuilder,\n  ClientGeneratorsBuilder,\n  ClientHeaderBuilder,\n  generateVerbImports,\n  GeneratorDependency,\n  GeneratorMutator,\n  GeneratorOptions,\n  GeneratorVerbOptions,\n  GetterParams,\n  GetterProp,\n  GetterProps,\n  GetterPropType,\n  GetterResponse,\n  pascal,\n  stringify,\n  toObjectString,\n  Verbs,\n  jsDoc,\n  SwrOptions,\n  OutputHttpClient,\n} from '@orval/core';\nimport {\n  AXIOS_DEPENDENCIES,\n  generateSwrRequestFunction,\n  getSwrRequestOptions,\n  getSwrErrorType,\n  getSwrRequestSecondArg,\n  getHttpRequestSecondArg,\n  getSwrMutationFetcherOptionType,\n  getSwrMutationFetcherType,\n  getSwrHeader,\n} from './client';\n\nconst PARAMS_SERIALIZER_DEPENDENCIES: GeneratorDependency[] = [\n  {\n    exports: [\n      {\n        name: 'qs',\n        default: true,\n        values: true,\n        syntheticDefaultImport: true,\n      },\n    ],\n    dependency: 'qs',\n  },\n];\n\nconst SWR_DEPENDENCIES: GeneratorDependency[] = [\n  {\n    exports: [\n      { name: 'useSwr', values: true, default: true },\n      { name: 'SWRConfiguration' },\n      { name: 'Key' },\n      { name: 'Arguments' },\n    ],\n    dependency: 'swr',\n  },\n];\n\nconst SWR_INFINITE_DEPENDENCIES: GeneratorDependency[] = [\n  {\n    exports: [\n      { name: 'useSWRInfinite', values: true, default: true },\n      { name: 'SWRInfiniteConfiguration' },\n      { name: 'SWRInfiniteKeyLoader' },\n    ],\n    dependency: 'swr/infinite',\n  },\n];\n\nconst SWR_MUTATION_DEPENDENCIES: GeneratorDependency[] = [\n  {\n    exports: [\n      { name: 'useSWRMutation', values: true, default: true },\n      { name: 'SWRMutationConfiguration' },\n      { name: 'SWRMutationKey' },\n    ],\n    dependency: 'swr/mutation',\n  },\n];\n\nexport const getSwrDependencies: ClientDependenciesBuilder = (\n  hasGlobalMutator: boolean,\n  hasParamsSerializerOptions: boolean,\n  _packageJson,\n  httpClient?: OutputHttpClient,\n) => [\n  ...(!hasGlobalMutator && httpClient === OutputHttpClient.AXIOS\n    ? AXIOS_DEPENDENCIES\n    : []),\n  ...(hasParamsSerializerOptions ? PARAMS_SERIALIZER_DEPENDENCIES : []),\n  ...SWR_DEPENDENCIES,\n  ...SWR_INFINITE_DEPENDENCIES,\n  ...SWR_MUTATION_DEPENDENCIES,\n];\n\nconst generateSwrArguments = ({\n  operationName,\n  mutator,\n  isRequestOptions,\n  isInfinite,\n  httpClient,\n}: {\n  operationName: string;\n  mutator?: GeneratorMutator;\n  isRequestOptions: boolean;\n  isInfinite: boolean;\n  httpClient: OutputHttpClient;\n}) => {\n  const configType = isInfinite\n    ? 'SWRInfiniteConfiguration'\n    : 'SWRConfiguration';\n  const optionsType = isInfinite\n    ? '{ swrKeyLoader?: SWRInfiniteKeyLoader, enabled?: boolean }'\n    : '{ swrKey?: Key, enabled?: boolean }';\n  const definition = `${configType}<Awaited<ReturnType<typeof ${operationName}>>, TError> & ${optionsType}`;\n\n  if (!isRequestOptions) {\n    return `swrOptions?: ${definition}`;\n  }\n\n  return `options?: { swr?:${definition}, ${getSwrRequestOptions(httpClient, mutator)} }\\n`;\n};\n\nconst generateSwrMutationArguments = ({\n  operationName,\n  isRequestOptions,\n  mutator,\n  swrBodyType,\n  httpClient,\n}: {\n  operationName: string;\n  isRequestOptions: boolean;\n  mutator?: GeneratorMutator;\n  swrBodyType: string;\n  httpClient: OutputHttpClient;\n}) => {\n  const definition = `SWRMutationConfiguration<Awaited<ReturnType<typeof ${operationName}>>, TError, Key, ${swrBodyType}, Awaited<ReturnType<typeof ${operationName}>>> & { swrKey?: string }`;\n\n  if (!isRequestOptions) {\n    return `swrOptions?: ${definition}`;\n  }\n\n  return `options?: { swr?:${definition}, ${getSwrRequestOptions(httpClient, mutator)}}\\n`;\n};\n\nconst generateSwrImplementation = ({\n  operationName,\n  swrKeyFnName,\n  swrKeyLoaderFnName,\n  swrProperties,\n  swrKeyProperties,\n  params,\n  mutator,\n  isRequestOptions,\n  response,\n  swrOptions,\n  props,\n  doc,\n  httpClient,\n}: {\n  isRequestOptions: boolean;\n  operationName: string;\n  swrKeyFnName: string;\n  swrKeyLoaderFnName: string;\n  swrProperties: string;\n  swrKeyProperties: string;\n  params: GetterParams;\n  props: GetterProps;\n  response: GetterResponse;\n  mutator?: GeneratorMutator;\n  swrOptions: SwrOptions;\n  doc?: string;\n  httpClient: OutputHttpClient;\n}) => {\n  const swrProps = toObjectString(props, 'implementation');\n\n  const hasParamReservedWord = props.some(\n    (prop: GetterProp) => prop.name === 'query',\n  );\n  const queryResultVarName = hasParamReservedWord ? '_query' : 'query';\n\n  const httpFunctionProps = swrProperties;\n\n  const enabledImplementation = `const isEnabled = swrOptions?.enabled !== false${\n    params.length\n      ? ` && !!(${params.map(({ name }) => name).join(' && ')})`\n      : ''\n  }`;\n  const swrKeyImplementation = `const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? ${swrKeyFnName}(${swrKeyProperties}) : null);`;\n  const swrKeyLoaderImplementation = `const swrKeyLoader = swrOptions?.swrKeyLoader ?? (() => isEnabled ? ${swrKeyLoaderFnName}(${swrKeyProperties}) : null);`;\n\n  const errorType = getSwrErrorType(response, httpClient, mutator);\n  const swrRequestSecondArg = getSwrRequestSecondArg(httpClient, mutator);\n  const httpRequestSecondArg = getHttpRequestSecondArg(httpClient, mutator);\n\n  const useSWRInfiniteImplementation = swrOptions.useInfinite\n    ? `\nexport type ${pascal(\n        operationName,\n      )}InfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof ${operationName}>>>\nexport type ${pascal(operationName)}InfiniteError = ${errorType}\n\n${doc}export const ${camel(\n        `use-${operationName}-infinite`,\n      )} = <TError = ${errorType}>(\n  ${swrProps} ${generateSwrArguments({\n    operationName,\n    mutator,\n    isRequestOptions,\n    isInfinite: true,\n    httpClient,\n  })}) => {\n  ${\n    isRequestOptions\n      ? `const {swr: swrOptions${swrRequestSecondArg ? `, ${swrRequestSecondArg}` : ''}} = options ?? {}`\n      : ''\n  }\n\n  ${enabledImplementation}\n  ${swrKeyLoaderImplementation}\n  const swrFn = () => ${operationName}(${httpFunctionProps}${\n    httpFunctionProps && httpRequestSecondArg ? ', ' : ''\n  }${httpRequestSecondArg})\n\n  const ${queryResultVarName} = useSWRInfinite<Awaited<ReturnType<typeof swrFn>>, TError>(swrKeyLoader, swrFn, ${\n    swrOptions.swrInfiniteOptions\n      ? `{\n    ${stringify(swrOptions.swrInfiniteOptions)?.slice(1, -1)}\n    ...swrOptions\n  }`\n      : 'swrOptions'\n  })\n\n  return {\n    swrKeyLoader,\n    ...${queryResultVarName}\n  }\n}\\n`\n    : '';\n\n  const useSwrImplementation = `\nexport type ${pascal(\n    operationName,\n  )}QueryResult = NonNullable<Awaited<ReturnType<typeof ${operationName}>>>\nexport type ${pascal(operationName)}QueryError = ${errorType}\n\n${doc}export const ${camel(`use-${operationName}`)} = <TError = ${errorType}>(\n  ${swrProps} ${generateSwrArguments({\n    operationName,\n    mutator,\n    isRequestOptions,\n    isInfinite: false,\n    httpClient,\n  })}) => {\n  ${\n    isRequestOptions\n      ? `const {swr: swrOptions${swrRequestSecondArg ? `, ${swrRequestSecondArg}` : ''}} = options ?? {}`\n      : ''\n  }\n\n  ${enabledImplementation}\n  ${swrKeyImplementation}\n  const swrFn = () => ${operationName}(${httpFunctionProps}${\n    httpFunctionProps && httpRequestSecondArg ? ', ' : ''\n  }${httpRequestSecondArg})\n\n  const ${queryResultVarName} = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, ${\n    swrOptions.swrOptions\n      ? `{\n    ${stringify(swrOptions.swrOptions)?.slice(1, -1)}\n    ...swrOptions\n  }`\n      : 'swrOptions'\n  })\n\n  return {\n    swrKey,\n    ...${queryResultVarName}\n  }\n}\\n`;\n\n  return useSWRInfiniteImplementation + useSwrImplementation;\n};\n\nconst generateSwrMutationImplementation = ({\n  isRequestOptions,\n  operationName,\n  swrKeyFnName,\n  swrMutationFetcherName,\n  swrKeyProperties,\n  swrMutationFetcherProperties,\n  swrProps,\n  props,\n  response,\n  mutator,\n  swrOptions,\n  doc,\n  swrBodyType,\n  httpClient,\n  verb,\n}: {\n  isRequestOptions: boolean;\n  operationName: string;\n  swrKeyFnName: string;\n  swrMutationFetcherName: string;\n  swrKeyProperties: string;\n  swrMutationFetcherProperties: string;\n  swrProps: string;\n  props: GetterProps;\n  response: GetterResponse;\n  mutator?: GeneratorMutator;\n  swrOptions: SwrOptions;\n  doc?: string;\n  swrBodyType: string;\n  httpClient: OutputHttpClient;\n  verb?: Verbs;\n}) => {\n  const hasParamReservedWord = props.some(\n    (prop: GetterProp) => prop.name === 'query',\n  );\n  const queryResultVarName = hasParamReservedWord ? '_query' : 'query';\n\n  const swrKeyImplementation = `const swrKey = swrOptions?.swrKey ?? ${swrKeyFnName}(${swrKeyProperties});`;\n\n  const errorType = getSwrErrorType(response, httpClient, mutator);\n  const swrRequestSecondArg = getSwrRequestSecondArg(httpClient, mutator);\n  const httpRequestSecondArg = getHttpRequestSecondArg(httpClient, mutator);\n\n  const useSwrImplementation = `\nexport type ${pascal(\n    operationName,\n  )}MutationResult = NonNullable<Awaited<ReturnType<typeof ${operationName}>>>\nexport type ${pascal(operationName)}MutationError = ${errorType}\n\n${doc}export const ${camel(`use-${operationName}${verb === Verbs.GET ? '-mutation' : ''}`)} = <TError = ${errorType}>(\n  ${swrProps} ${generateSwrMutationArguments({\n    operationName,\n    isRequestOptions,\n    mutator,\n    swrBodyType,\n    httpClient,\n  })}) => {\n\n  ${isRequestOptions ? `const {swr: swrOptions${swrRequestSecondArg ? `, ${swrRequestSecondArg}` : ''}} = options ?? {}` : ''}\n\n  ${swrKeyImplementation}\n  const swrFn = ${swrMutationFetcherName}(${swrMutationFetcherProperties}${\n    swrMutationFetcherProperties && httpRequestSecondArg ? ', ' : ''\n  }${httpRequestSecondArg});\n\n  const ${queryResultVarName} = useSWRMutation(swrKey, swrFn, ${\n    swrOptions.swrMutationOptions\n      ? `{\n    ${stringify(swrOptions.swrMutationOptions)?.slice(1, -1)}\n    ...swrOptions\n  }`\n      : 'swrOptions'\n  })\n\n  return {\n    swrKey,\n    ...${queryResultVarName}\n  }\n}\\n`;\n\n  return useSwrImplementation;\n};\n\nconst generateSwrHook = (\n  {\n    queryParams,\n    operationName,\n    body,\n    props,\n    verb,\n    params,\n    override,\n    mutator,\n    response,\n    summary,\n    deprecated,\n  }: GeneratorVerbOptions,\n  { route, context }: GeneratorOptions,\n) => {\n  const isRequestOptions = override?.requestOptions !== false;\n  const httpClient = context.output.httpClient;\n  const doc = jsDoc({ summary, deprecated });\n\n  const queryKeyProps = toObjectString(\n    props.filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS ||\n        prop.type === GetterPropType.QUERY_PARAM,\n    ),\n    'implementation',\n  );\n\n  const swrProps = toObjectString(\n    props.filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.QUERY_PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS,\n    ),\n    'implementation',\n  );\n\n  const swrMutationFetcherProperties = props\n    .filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.QUERY_PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS,\n    )\n    .map((param) => {\n      if (param.type === GetterPropType.NAMED_PATH_PARAMS) {\n        return param.destructured;\n      } else {\n        return param.name;\n      }\n    })\n    .join(',');\n\n  const swrKeyProperties = props\n    .filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS ||\n        prop.type === GetterPropType.QUERY_PARAM,\n    )\n    .map((prop) => {\n      if (prop.type === GetterPropType.NAMED_PATH_PARAMS) {\n        return prop.destructured;\n      } else {\n        return prop.name;\n      }\n    })\n    .join(',');\n\n  const swrMutationFetcherName = camel(`get-${operationName}-mutation-fetcher`);\n\n  if (verb === Verbs.GET) {\n    const swrKeyProperties = props\n      .filter((prop) => prop.type !== GetterPropType.HEADER)\n      .map((param) => {\n        if (param.type === GetterPropType.NAMED_PATH_PARAMS)\n          return param.destructured;\n        return param.type === GetterPropType.BODY\n          ? body.implementation\n          : param.name;\n      })\n      .join(',');\n\n    const swrProperties = props\n      .map((param) => {\n        if (param.type === GetterPropType.NAMED_PATH_PARAMS)\n          return param.destructured;\n        return param.type === GetterPropType.BODY\n          ? body.implementation\n          : param.name;\n      })\n      .join(',');\n\n    const queryKeyProps = toObjectString(\n      props.filter((prop) => prop.type !== GetterPropType.HEADER),\n      'implementation',\n    );\n\n    const swrKeyFnName = camel(`get-${operationName}-key`);\n    const swrKeyFn = `\nexport const ${swrKeyFnName} = (${queryKeyProps}) => [\\`${route}\\`${\n      queryParams ? ', ...(params ? [params]: [])' : ''\n    }] as const;\n`;\n\n    const swrKeyLoaderFnName = camel(\n      `get-${operationName}-infinite-key-loader`,\n    );\n    const swrKeyLoader = override.swr.useInfinite\n      ? `export const ${swrKeyLoaderFnName} = (${queryKeyProps}) => {\n  return (page: number, previousPageData: Awaited<ReturnType<typeof ${operationName}>>) => {\n    if (previousPageData && !previousPageData.data) return null\n\n    return [\\`${route}\\`${queryParams ? ', ...(params ? [{...params,page}]: [{page}])' : ''}${\n      body.implementation ? `, ${body.implementation}` : ''\n    }] as const;\n  }\n}\\n`\n      : '';\n\n    const swrImplementation = generateSwrImplementation({\n      operationName,\n      swrKeyFnName,\n      swrKeyLoaderFnName,\n      swrProperties,\n      swrKeyProperties,\n      params,\n      props,\n      mutator,\n      isRequestOptions,\n      response,\n      swrOptions: override.swr,\n      doc,\n      httpClient,\n    });\n\n    if (!override.swr.useSWRMutationForGet) {\n      return swrKeyFn + swrKeyLoader + swrImplementation;\n    }\n\n    // For OutputClient.SWR_GET_MUTATION, generate both useSWR and useSWRMutation\n    const httpFnPropertiesForGet = props\n      .filter((prop) => prop.type !== GetterPropType.HEADER)\n      .map((prop) => {\n        if (prop.type === GetterPropType.NAMED_PATH_PARAMS) {\n          return prop.destructured;\n        } else {\n          return prop.name;\n        }\n      })\n      .join(', ');\n\n    const swrMutationFetcherType = getSwrMutationFetcherType(\n      response,\n      httpClient,\n      override.fetch?.includeHttpResponseReturnType,\n      operationName,\n      mutator,\n    );\n    const swrMutationFetcherOptionType = getSwrMutationFetcherOptionType(\n      httpClient,\n      mutator,\n    );\n\n    const swrMutationFetcherOptions =\n      isRequestOptions && swrMutationFetcherOptionType\n        ? `options${context.output.optionsParamRequired ? '' : '?'}: ${swrMutationFetcherOptionType}`\n        : '';\n\n    const swrMutationFetcherFn = `\nexport const ${swrMutationFetcherName} = (${queryKeyProps} ${swrMutationFetcherOptions}) => {\n  return (_: Key, __: { arg?: never }): ${swrMutationFetcherType} => {\n    return ${operationName}(${httpFnPropertiesForGet}${\n      swrMutationFetcherOptions.length\n        ? (httpFnPropertiesForGet.length ? ', ' : '') + 'options'\n        : ''\n    });\n  }\n}\n`;\n\n    const swrMutationImplementation = generateSwrMutationImplementation({\n      operationName,\n      swrKeyFnName,\n      swrMutationFetcherName,\n      swrKeyProperties,\n      swrMutationFetcherProperties,\n      swrProps,\n      props,\n      isRequestOptions,\n      response,\n      mutator,\n      swrOptions: override.swr,\n      doc,\n      swrBodyType: 'never',\n      httpClient,\n      verb: Verbs.GET,\n    });\n\n    return (\n      swrKeyFn +\n      swrKeyLoader +\n      swrImplementation +\n      swrMutationFetcherFn +\n      swrMutationImplementation\n    );\n  } else {\n    const httpFnProperties = props\n      .filter((prop) => prop.type !== GetterPropType.HEADER)\n      .map((prop) => {\n        if (prop.type === GetterPropType.NAMED_PATH_PARAMS) {\n          return prop.destructured;\n        } else if (prop.type === GetterPropType.BODY) {\n          return `arg`;\n        } else {\n          return prop.name;\n        }\n      })\n      .join(', ');\n\n    const swrKeyFnName = camel(`get-${operationName}-mutation-key`);\n    const swrMutationKeyFn = `export const ${swrKeyFnName} = (${queryKeyProps}) => [\\`${route}\\`${\n      queryParams ? ', ...(params ? [params]: [])' : ''\n    }] as const;\n`;\n\n    const swrMutationFetcherType = getSwrMutationFetcherType(\n      response,\n      httpClient,\n      override.fetch?.includeHttpResponseReturnType,\n      operationName,\n      mutator,\n    );\n    const swrMutationFetcherOptionType = getSwrMutationFetcherOptionType(\n      httpClient,\n      mutator,\n    );\n\n    const swrMutationFetcherOptions =\n      isRequestOptions && swrMutationFetcherOptionType\n        ? `options${context.output.optionsParamRequired ? '' : '?'}: ${swrMutationFetcherOptionType}`\n        : '';\n\n    const swrMutationFetcherArg = props.some(\n      (prop) => prop.type === GetterPropType.BODY,\n    )\n      ? '{ arg }'\n      : '__';\n\n    const swrBodyType =\n      props\n        .find((prop) => prop.type === GetterPropType.BODY)\n        ?.implementation.split(': ')[1] ?? 'Arguments';\n\n    const swrMutationFetcherFn = `\nexport const ${swrMutationFetcherName} = (${swrProps} ${swrMutationFetcherOptions}) => {\n  return (_: Key, ${swrMutationFetcherArg}: { arg: ${swrBodyType} }): ${swrMutationFetcherType} => {\n    return ${operationName}(${httpFnProperties}${\n      swrMutationFetcherOptions.length\n        ? (httpFnProperties.length ? ', ' : '') + 'options'\n        : ''\n    });\n  }\n}\\n`;\n\n    const swrImplementation = generateSwrMutationImplementation({\n      operationName,\n      swrKeyFnName,\n      swrMutationFetcherName,\n      swrKeyProperties,\n      swrMutationFetcherProperties,\n      swrProps,\n      props,\n      isRequestOptions,\n      response,\n      mutator,\n      swrOptions: override.swr,\n      doc,\n      swrBodyType,\n      httpClient: context.output.httpClient,\n    });\n\n    return swrMutationFetcherFn + swrMutationKeyFn + swrImplementation;\n  }\n};\n\nexport const generateSwrHeader: ClientHeaderBuilder = (params) =>\n  `\n  ${\n    !params.hasAwaitedType\n      ? `type AwaitedInput<T> = PromiseLike<T> | T;\\n\n      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;\\n\\n`\n      : ''\n  }\n  ${\n    params.isRequestOptions && params.isMutator\n      ? `type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];\\n\\n`\n      : ''\n  }\n  ${getSwrHeader(params)}\n`;\n\nexport const generateSwr: ClientBuilder = (verbOptions, options) => {\n  const imports = generateVerbImports(verbOptions);\n  const functionImplementation = generateSwrRequestFunction(\n    verbOptions,\n    options,\n  );\n  const hookImplementation = generateSwrHook(verbOptions, options);\n\n  return {\n    implementation: `${functionImplementation}\\n\\n${hookImplementation}`,\n    imports,\n  };\n};\n\nconst swrClientBuilder: ClientGeneratorsBuilder = {\n  client: generateSwr,\n  header: generateSwrHeader,\n  dependencies: getSwrDependencies,\n};\n\nexport const builder = () => () => swrClientBuilder;\n\nexport default builder;\n","import {\n  ClientHeaderBuilder,\n  generateFormDataAndUrlEncodedFunction,\n  generateMutatorConfig,\n  generateMutatorRequestOptions,\n  generateOptions,\n  GeneratorDependency,\n  GeneratorMutator,\n  GeneratorOptions,\n  GeneratorVerbOptions,\n  GetterResponse,\n  isSyntheticDefaultImportsAllow,\n  OutputHttpClient,\n  toObjectString,\n} from '@orval/core';\n\nimport {\n  fetchResponseTypeName,\n  generateRequestFunction as generateFetchRequestFunction,\n  generateFetchHeader,\n} from '@orval/fetch';\n\nexport const AXIOS_DEPENDENCIES: GeneratorDependency[] = [\n  {\n    exports: [\n      {\n        name: 'axios',\n        default: true,\n        values: true,\n        syntheticDefaultImport: true,\n      },\n      { name: 'AxiosRequestConfig' },\n      { name: 'AxiosResponse' },\n      { name: 'AxiosError' },\n    ],\n    dependency: 'axios',\n  },\n];\n\nexport const generateSwrRequestFunction = (\n  verbOptions: GeneratorVerbOptions,\n  options: GeneratorOptions,\n) => {\n  if (options.context.output.httpClient === OutputHttpClient.AXIOS) {\n    return generateAxiosRequestFunction(verbOptions, options);\n  } else {\n    return generateFetchRequestFunction(verbOptions, options);\n  }\n};\n\nconst generateAxiosRequestFunction = (\n  {\n    headers,\n    queryParams,\n    operationName,\n    response,\n    mutator,\n    body,\n    props,\n    verb,\n    formData,\n    formUrlEncoded,\n    override,\n    paramsSerializer,\n  }: GeneratorVerbOptions,\n  { route, context }: GeneratorOptions,\n) => {\n  const isRequestOptions = override?.requestOptions !== false;\n  const isFormData = override?.formData.disabled === false;\n  const isFormUrlEncoded = override?.formUrlEncoded !== false;\n  const isExactOptionalPropertyTypes =\n    !!context.output.tsconfig?.compilerOptions?.exactOptionalPropertyTypes;\n  const isSyntheticDefaultImportsAllowed = isSyntheticDefaultImportsAllow(\n    context.output.tsconfig,\n  );\n\n  const bodyForm = generateFormDataAndUrlEncodedFunction({\n    formData,\n    formUrlEncoded,\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  });\n\n  if (mutator) {\n    const mutatorConfig = generateMutatorConfig({\n      route,\n      body,\n      headers,\n      queryParams,\n      response,\n      verb,\n      isFormData,\n      isFormUrlEncoded,\n      hasSignal: false,\n      isExactOptionalPropertyTypes,\n    });\n\n    const propsImplementation =\n      mutator?.bodyTypeName && body.definition\n        ? toObjectString(props, 'implementation').replace(\n            new RegExp(`(\\\\w*):\\\\s?${body.definition}`),\n            `$1: ${mutator.bodyTypeName}<${body.definition}>`,\n          )\n        : toObjectString(props, 'implementation');\n\n    const requestOptions = isRequestOptions\n      ? generateMutatorRequestOptions(\n          override?.requestOptions,\n          mutator.hasSecondArg,\n        )\n      : '';\n\n    const requestImplementation = `export const ${operationName} = (\\n    ${propsImplementation}\\n ${\n      isRequestOptions && mutator.hasSecondArg\n        ? `options${context.output.optionsParamRequired ? '' : '?'}: SecondParameter<typeof ${mutator.name}>`\n        : ''\n    }) => {${bodyForm}\n    return ${mutator.name}<${response.definition.success || 'unknown'}>(\n    ${mutatorConfig},\n    ${requestOptions});\n  }\n`;\n\n    return requestImplementation;\n  }\n\n  const options = generateOptions({\n    route,\n    body,\n    headers,\n    queryParams,\n    response,\n    verb,\n    requestOptions: override?.requestOptions,\n    isFormData,\n    isFormUrlEncoded,\n    paramsSerializer,\n    paramsSerializerOptions: override?.paramsSerializerOptions,\n    isExactOptionalPropertyTypes,\n    hasSignal: false,\n  });\n\n  return `export const ${operationName} = (\\n    ${toObjectString(\n    props,\n    'implementation',\n  )} ${\n    isRequestOptions ? `options?: AxiosRequestConfig\\n` : ''\n  } ): Promise<AxiosResponse<${\n    response.definition.success || 'unknown'\n  }>> => {${bodyForm}\n    return axios${\n      !isSyntheticDefaultImportsAllowed ? '.default' : ''\n    }.${verb}(${options});\n  }\n`;\n};\n\nexport const getSwrRequestOptions = (\n  httpClient: OutputHttpClient,\n  mutator?: GeneratorMutator,\n) => {\n  if (!mutator) {\n    return httpClient === OutputHttpClient.AXIOS\n      ? 'axios?: AxiosRequestConfig'\n      : 'fetch?: RequestInit';\n  } else if (mutator?.hasSecondArg) {\n    return `request?: SecondParameter<typeof ${mutator.name}>`;\n  } else {\n    return '';\n  }\n};\n\nexport const getSwrErrorType = (\n  response: GetterResponse,\n  httpClient: OutputHttpClient,\n  mutator?: GeneratorMutator,\n) => {\n  if (mutator) {\n    return mutator.hasErrorType\n      ? `ErrorType<${response.definition.errors || 'unknown'}>`\n      : response.definition.errors || 'unknown';\n  } else {\n    const errorType =\n      httpClient === OutputHttpClient.AXIOS ? 'AxiosError' : 'Promise';\n\n    return `${errorType}<${response.definition.errors || 'unknown'}>`;\n  }\n};\n\nexport const getSwrRequestSecondArg = (\n  httpClient: OutputHttpClient,\n  mutator?: GeneratorMutator,\n) => {\n  if (!mutator) {\n    return httpClient === OutputHttpClient.AXIOS\n      ? 'axios: axiosOptions'\n      : 'fetch: fetchOptions';\n  } else if (mutator?.hasSecondArg) {\n    return 'request: requestOptions';\n  } else {\n    return '';\n  }\n};\n\nexport const getHttpRequestSecondArg = (\n  httpClient: OutputHttpClient,\n  mutator?: GeneratorMutator,\n) => {\n  if (!mutator) {\n    return httpClient === OutputHttpClient.AXIOS\n      ? `axiosOptions`\n      : `fetchOptions`;\n  } else if (mutator?.hasSecondArg) {\n    return 'requestOptions';\n  } else {\n    return '';\n  }\n};\n\nexport const getSwrMutationFetcherOptionType = (\n  httpClient: OutputHttpClient,\n  mutator?: GeneratorMutator,\n) => {\n  if (!mutator) {\n    return httpClient === OutputHttpClient.AXIOS\n      ? 'AxiosRequestConfig'\n      : 'RequestInit';\n  } else if (mutator.hasSecondArg) {\n    return `SecondParameter<typeof ${mutator.name}>`;\n  } else {\n    return '';\n  }\n};\n\nexport const getSwrMutationFetcherType = (\n  response: GetterResponse,\n  httpClient: OutputHttpClient,\n  includeHttpResponseReturnType: boolean | undefined,\n  operationName: string,\n  mutator?: GeneratorMutator,\n) => {\n  if (httpClient === OutputHttpClient.FETCH) {\n    const responseType = fetchResponseTypeName(\n      includeHttpResponseReturnType,\n      response.definition.success,\n      operationName,\n    );\n\n    return `Promise<${responseType}>`;\n  } else if (mutator) {\n    return `Promise<${response.definition.success || 'unknown'}>`;\n  } else {\n    return `Promise<AxiosResponse<${response.definition.success || 'unknown'}>>`;\n  }\n};\n\nexport const getSwrHeader: ClientHeaderBuilder = (params) => {\n  return params.output.httpClient === OutputHttpClient.FETCH\n    ? generateFetchHeader(params)\n    : '';\n};\n"],"mappings":"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","names":["import_core","generateFetchRequestFunction","swrKeyProperties","queryKeyProps"]}